steps:
  - name: 'gcr.io/cloud-builders/docker'
    id: 'pull-app-builder'
    args:
      - 'pull'
      - 'us.gcr.io/${PROJECT_ID}/sample:build-stage-cache'
    waitFor: ['-']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'pull-app'
    args:
      - 'pull'
      - 'us.gcr.io/${PROJECT_ID}/sample:latest'
    waitFor: ['-']
  
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-app-builder'
    args:
      - 'build' 
      - '-t' 
      - 'us.gcr.io/${PROJECT_ID}/sample:build-stage-cache'
      - '--target'
      - 'builder'
      - '--cache-from'
      - 'us.gcr.io/${PROJECT_ID}/sample:build-stage-cache'
      - '--build-arg'
      - 'DIR_NAME=sample'
      - 'sample'
    waitFor: ['pull-app-builder']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-app'
    args:
      - 'build'
      - '-t'
      - 'us.gcr.io/${PROJECT_ID}/sample:latest'
      - '-t'
      - 'us.gcr.io/${PROJECT_ID}/sample:$BRANCH_NAME-$REVISION_ID'
      - '--cache-from'
      - 'us.gcr.io/${PROJECT_ID}/sample:build-stage-cache'
      - '--cache-from'
      - 'us.gcr.io/${PROJECT_ID}/sample:latest'
      - '--build-arg'
      - 'DIR_NAME=sample'
      - 'sample'
    waitFor: ['build-app-builder', 'pull-app']
  
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-app'
    args:
      - 'push'
      - 'us.gcr.io/${PROJECT_ID}/sample:$BRANCH_NAME-$REVISION_ID'
    waitFor: ['build-app'] 

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-mongodb'
    args:
      - 'build'
      - '-t'
      - 'us.gcr.io/${PROJECT_ID}/mongodb:latest'
      - '-t'
      - 'us.gcr.io/${PROJECT_ID}/mongodb:$BRANCH_NAME-$REVISION_ID'
      - 'mongodb'
    waitFor: ['-']
  
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'get-credentials'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'rocket-practice-cluster'
      - '--zone=${_ZONE}'
      - '--project=${PROJECT_ID}'
    waitFor: ['-']
  

  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'deployment-default'
    args:
      - 'apply'
      - '-f'
      - 'k8s/default'
      - '--record'
    waitFor: ['build-app', 'build-mongodb', 'get-credentials']

  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'patch-default-deployment'
    args:
      - 'patch'
      - 'deployment'
      - 'sample-api-server-deployment'
      - '-p' 
      - '{"spec":{"template":{"spec":{"containers":[{"name": "sample-api-server", "image": "us.gcr.io/$PROJECT_ID/sample:$BRANCH_NAME-$REVISION_ID}]}}}}"'
    waitFor: ['deployment-default', 'push-app']

  - name: 'gcr.io/cloud-builders/gcloud'
    id : 'decrypto-deployment-production-loadbalancer'
    args:
      - 'kms'
      - 'decrypt'
      - '--location'
      - 'global'
      - '--keyring'
      - 'rust-api'
      - '--key'
      - 'kubernetes-deployment-key'
      - '--ciphertext-file'
      - 'k8s/production/loadbalancer.yaml.encode'
      - '--plaintext-file'
      - 'k8s/production/loadbalancer.yaml'
    waitFor: ['-']

  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'deployment-production'
    args:
      - 'apply'
      - '-f'
      - 'k8s/production'
      - '--record'
    waitFor: ['decrypto-deployment-production-loadbalancer', 'build-app', 'build-mongodb', 'get-credentials']

timeout: 3600s 
images:
  - 'us.gcr.io/${PROJECT_ID}/mongodb:latest'
  - 'us.gcr.io/${PROJECT_ID}/mongodb:$BRANCH_NAME-$REVISION_ID'
  - 'us.gcr.io/${PROJECT_ID}/sample:latest'
  - 'us.gcr.io/${PROJECT_ID}/sample:$BRANCH_NAME-$REVISION_ID'
  - 'us.gcr.io/${PROJECT_ID}/sample:build-stage-cache'
# todo:
